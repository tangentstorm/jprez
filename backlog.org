#+TITLE: backlog for jprez ( https://github.com/tangentstorm/jprez/ )

* inbox (for triage)

** TODO pressing n at end of last slide takes you to top of last slide :jprez:bug:
it should just do nothing.
** TODO allow binding keys to multi-character macros
NB. TODO: 'd$' is the "correct" vim macro for kc_k/macro 'K'
** TODO group syntax to record a macro                         :ui:edit:macros:
: (abcd) would execute a,b,c,d in 4 ticks
** TODO block syntax to run a macro at max speed               :ui:edit:macros:
: [abcd] would execute a,b,c,d in 1 tick
- for typing long strings at speed
- for grouping primitive operations into a single "command"
** TODO give blocks a name
: :go[abcd]  would define 'go'
: {go} would call 'go' (??)
- there needs to be an end delimiter because

** TODO character to invoke a named macro
- right now, every macro instruction is a single character
- therefore, many ascii characters are used up.
- so: we need an escape character to indicate that we want to call a macro,
    rather than execute each character in its name.
- we also need an end-escape character to indicate the end of the name.


* current sprint (9/20-10/01)
** -- done
*** rejms-14
**** DONE "focus color" for cursors in list, edit, repl      :feature:jprez:jkvm:
*** rejms-15 : 5 easy changes
**** DONE make sure R=:0 in =render__repl= (in update, copy R from ed)
**** DONE I set TSV=0 in macro player. it should be 1.       :jprez:
actually i don't use ?TSV, i use TSV*?0 so it's in seconds.
**** DONE [#A] make A=:1  the default for widgets            :jkvm:
**** DONE [#A] backspace key in editor                       :jprez:
needed to manually copy all keyboard handlers.
**** DONE don't break on =kc_m=                                :jkvm:edit:
**** DONE reorganize mje so that all keybindings map to named verb
(instead of verb definition)
*** rejms-16 : repl enhancements
**** DONE [#A] colorize input history for standalone repl    :jrepl:
**** DONE start repl cursor at top of the screen             :jprez:
*** rejms-17 : working repl in jprez
**** DONE inserting repl->script mis-manages start state     :bug:jprez:
part of this was clearing the worlds, and part was =setval__tmp''=
**** DONE [#C] clear "future" worlds on input                :jprez:
**** DONE [#C] rebuild worlds on delete                      :jprez:
**** DONE run the command and show the output in the repl    :jprez:
**** DONE tab to switch between outline and repl
*** rejms-18 : repl command history
**** DONE [4/4] [#A] tie repl to the command history         :jrepl:
Pressing up or down should let you navigate the input history.
This history is provided by worlds.ijs.

- [X] maintain an internal (invisible) list widget =hist= with input history
- [X] last item in =hist= is the current edit buffer (set by up-arrow)
- [X] on up arrow:
  - [X] if i'm at the end of list, then update the list else ok
  - [X] call =bak__hist= to move the history cursor
  - [X] set B to =val__hist=
- [X] on down arrow:
  - call =fwd__hist=
  - set B to =val__hist=
*** rejms-19 : history fixes
**** DONE fix length error: =getlog__ed= when the log is empty. :ui:edit:

**** DONE fix length error in exec when input is empty.      :worlds:
**** DONE pressing up, and then down should restore the line :jrepl:
**** DONE create pluggable =on_arup= and =on_ardn= event handlers :ui:edit:
**** DONE record the history navigation in the macro         :jprez:
**** DONE command history for standalone repl (keybinding issue) :jrepl:
**** DONE playback of j/k keys in macro player (up/down arrows) :ui:edit:
**** DONE stopgap method to get input history into repl widget
right now it just sets the history when the focus changes,
and it includes the entire input history.

**** DONE properly handle history in playback                :jprez:
this is handled by =reset_rhist= when focus changes or you play macro.
this way we get the exact history at that point in time.

*** rejms-20 : backlog grooming 2
**** DONE rename =mje.ijs= to =jprez.ijs= (or at least =main.ijs=)

**** DONE ^c / in repl/line-editor should not break whole application
one exit key is enough.
(fix was to remove the 3 in j-kvm.ijs)

*** rejms-21 : start on table-driven keybindings (tag only in j-kvm)
*** rejms-22 : table-driven keybindings part 2*
**** DONE [#A] make keybindings table-driven (so people can choose which keys they use for input) :jkvm:
- edit: refactor so that keys, macro recording, and verb to execute (for live binding or macro playback) are all defined in one table
- maybe the quick answer for keyboard layouts is to just put that in a separate file?
- or have two tables: one mapping macro code <-> function name, and another for key <-> macro or key <-> function

*** rejms-23 : start multi-line editor
**** DONE [#A] Define Text Editor Component                  :widget:
(right now, the jprez editor is just a plain UiWidget)
**** DONE code editor should extend the UiList
we can start with the idea that the editor is just a list of lines
therefore, extend the UiListWidget
**** DONE create =of_self= adverb
**** DONE [#B] draw the editor cursor(s)                     :jprez:lsed:
render the tokenized LIST with an extra cursor drawn on top.
** -- ls editor stuff --
** TODO [#B] ui to set initial state of editor for slide       :jprez:lsed:
This feature has always existed, by using source blocks in the outline.
But there is no way to create such a thing in jprez.
So the feature here is to edit the inital editor state /without recording a macro/.
(meaning the viewer should not have to watch every character get typed out)
Ex: we want to show complete settle code /before/ we derive it.

** TODO [#B] let repl push input to the editor                 :jprez:lsed:
- maybe any assignment or load/import goes to the editor buffer by default?

** TODO [#B] store lsed state (visible, buffer, cursor) in each world :jprez:lsed:
** --- keyboard event handlers --
** TODO add keyboard handling to use the editor
** TODO [#A] key: ^s should save anywhere (global hotkeys)..   :key:
right now you have to be focused on the outline
could be done by having a globalkeys namespace that all keyboard handlers can =coinsert=
** TODO [#A] home key to move to start of line                 :key:
** TODO [#A] end key to move to end of line                    :key:
** TODO [#A] stop macro during playback
important because it can take a long time while you're using jprez
also you don't want other keys to fire the macro or it'll screw up
- plan: use different keybindings when A=1
(use whatever "modal" dispatch system i use for app keyboard focus)
- then we can have other keys when it's play mode, rather than having it interpret our keypresses
** TODO [#B] alt-d to delete next word                         :key:jkvm:edit:
** TODO [#B] alt-backspace to delete previous word             :key:jkvm:edit:
** TODO [#A] allow wrapping long output lines                  :jkvm:jrepl:
this would be an option for the behavior of =puts_vid= (when writing to video buffer)

it looks like they wrap, but jrepl doesn't know that they've wrapped,
and puts the cursor in weird places.
3 issues:
  - 1. the lines don't currently get cut off in the (default) non-wrapping mode
  - 2. when the lines wrap, jrepl doesn't know that there multiple lines, and shows the cursor in wrong place.
  - 3. when editing a line long enough to overflow, it wraps back to the left side.

** TODO [#A] start in repl mode
** TODO [#B] hide errors containing =do_WORLDnn_=                :bug:jrepl:
** TODO [#C] support the escape codes to toggle wrapping       :jkvm:
this would be added to the parser in =vputs_vid=

* backlog
** TODO [#A] make it easier to recover a working terminal if there's a bug in jprez/jkvm apps :jkvm:
extend 'reset' so that:
  - make sure echo is on
  - make sure cursor is on
  - if possible, make sure j's readline gets re-enabled so j prompt has cursor control
(right now, you try to debug and you waste brain cycles trying to see the cursor, etc.)
maybe even better would be a global error trap that does this in =kvm_loop=
** TODO [#A] add special pop-up editor for multi-widget macros.
(something that gave you more of fine-grained control over the timeline without having to edit macro code)
almost like a timeline view? or like an old-school midi/mod tracker?
ex ui: https://upload.wikimedia.org/wikipedia/commons/7/7e/Schism-beyond.gif

** TODO [#A] clean up the whole focus/keybinding mess          :jkvm:jprez:
:PROPERTIES:
:Effort:   3d
:END:
- one option might be to dynamically copy all the verbs from the focused widget into the keybinding namespace
(clear it out and do that every time the focus changes)
- to simply make the namespace in which i look for key handlers dynamic in j-kvm
- set to the app when using ui/app
- the app can do some of the keyboard dispatch
- maybe this means coming up standard numbers for keyboard codes
- gives us the ability to decouple the ui framework from vt-100

** TODO [#A] optimize output of render/blit
:PROPERTIES:
:Effort:   1h
:END:
*** TODO app: emit color codes only when they change
*** TODO app: emit only changed cells

*** TODO check for runs of same fg,bg colors
*** etc
a =: 8 32 $ a.i.'.'
b =: 95 (0 3;3 24; 3 26; 4 18)}a
(draw =: [: puts cls, a.{~ ])
draw b

NB. row;cols table for differences:
rct =: ((];"0{~)I.@(a:&~:)) <@I. a~:b

NB. individual coordinate pairs suitable for passing to {
xys =: ;/;(,"0&.>/)"1 rct
xys,.<"0 xys { b

NB. each row is x,y,val
;@|."1(;"0~{&b) xys
*** TODO redraw the changes:
generate list of attributes of the changed cells.
ideally you'd have rank 2 list: fg and bg.
turn it into 2 boxes.

anywhere the color changes from box to box, you issue a color change,
otherwise ''.

likewise, for the coordinates, if they're right next to each other,
you don't need to issue a cursor move
** TODO [#A] use numeric prefix for multi-commands             :jkvm:edit:
especially important for pauses
** TODO [#A] set base tempo for playback (in kps)              :jkvm:edit:
** TODO [#A] general undo system for all widgets               :jkvm:ui:
** TODO [#B] pick a new default panic/break key
maybe ^/ or ^] or whatever
because ^space is used in emacs to set the mark (enter selection mode)
** TODO [#B] ctrl-space should enter selection mode
** TODO [#B] command to insert a line from repl into the editor at cursor :jprez:lsed:
** TODO [#B] command to evaluate the editor in the repl        :jprez:lsed:
- probably don't want to dump the whole buffer
- maybe say '<<evaluated x lines...>>' in the repl
** TODO [#B] draw selection                                    :jprez:lsed:
** TODO [#B] ^c should not break out of the application
** TODO [#B] cut, copy, paste                                  :jkvm:edit:
requires a selection
** TODO [#B] make worlds optional                              :jrepl:
Some people will just prefer a regular repl.

** TODO [#B] speed up the escape code parsers (vputs, onkey)   :jkvm:
:PROPERTIES:
:Effort:   2d
:END:
** TODO [#B] extract UiComponent from UiApp (component=widget+container) (??) :jkvm:
have a list of children and auto-provide the ability to draw all of them with extra code.
(probably can factor this out of ui/app.ijs)
** TODO [#B] app: define applications' widget in a table with x,y,class,args
** TODO [#B] in the repl, if i print out a non-noun, syntax highlight it.
** TODO [#B] make =vputs_vid_= table-driven
the current code is a horrifying recursive descent parser
derive the state machine from a list of the escape code patterns
** TODO [#B] [5/12] have =vputs_vid_= recognize escape codes
https://www2.ccs.neu.edu/research/gpc/VonaUtils/vona/terminal/vtansi.htm
*** DONE home/goxy:  ~CSI (row? ; col?)? H~
*** DONE erase screen: ~CSI 2J~
*** DONE clear to eol: ~CSI K~
*** DONE show cursor: ~CSI ?25 h~
*** DONE hide cursor: ~CSI ?25 l~
*** TODO vt code: cursor shift: ~CSI count? A|B|C|D~ # A=up B=dn C=rt D=lf
*** TODO erase down: ~CSI J~
*** TODO bold:  ( CSI 1m ? or is that just "bright"?)
*** TODO italic?
*** TODO enable line wrap: ~CSI 7h~
*** TODO disable line wrap: ~CSI 7l~
*** TODO query cursor position: ~CSI 6n~  (responds with =CSI ROW;COL R=)
'0123456789' e.~ s=:'1234;1234234x42342'
** TODO [#B] add real =on_focus= handlers                        :jkvm:ui:
(after i do real keyboard focus handling solution)
** TODO [#B] check for multiline input. (direct defs)
  - we already have =depth_world_=  and we just need to check depth of last token
  - double check that parens cannot span lines inside direct definitions
** TODO [#B] visual indication that the file actually saved when you press ^s :jprez:
status line widget?
(right now we define a key and its macro logging character in one area, far away from the update method)
** TODO [#B] default tab-key handler (=kc_i=) should be to call 'next-widget' on main app :jkvm:
  - requires somehow having reference to the app in which we are running
** TODO [#B] =render_UiApp_= (and compound widgets) should clear R flag on each widget it renders :jkvm:ui:
** TODO [#B] look for =kc_spc= instead of =k_nul=                  :jkvm:
- =k_nul= works, but it should probably be named =kc_spc=
- (maybe this is vt100 thing?) actual ascii character is called ^@
- double check that control-space actually sends ascii 0.
** TODO [#C] remove =vtcolor_tok_= call from worlds              :jprez:techdebt:
- right now, =exec= calls =vtcolor= to color the history
- maybe the repl widget itself should just know to color history lines
- then we don't need vtcolor (which actually stores escape characters in the history)
** TODO [#C] on accept: remove consecutive duplicates from history
  - maybe: if B != as last line in history, add it to the history
  - maybe: if last two items in history are same, delete one


** TODO [#C] re-arrange mje.ijs so that open'' isn't in the middle of the file :jprez:techdebt:
** TODO [#C] fix j-kvm on osx
:PROPERTIES:
:Effort:   3d
:END:
** TODO [#C] test that the macro actually produces the next line of code in the script.
examples: manually edited macros might break.
using "future" completion history is not allowed.
** TODO [#C] detect and "bake" usage of "future command line history" :jprez:
this when you have a full future history from loading a presentation,
and you use that history to complete a line in the past.
This makes no sense from a narrative point of view.
** TODO [#C] show world for line, with content                 :jrepl:debug:
on screen, show the world number as you move the outline cursor
also have a display of the variables in scope that changes as you move the cursor
** TODO [#C] fix =loop_kvm= so left argument does not need to be in the z locale :jkvm:
:PROPERTIES:
:Effort:   3d
:END:
** TODO [#C] decide whether curs 0 should be part of loop_kvm_, and if so, how to use cursors?
maybe this is just a flag.
** TODO [#C] allow setting vim or emacs keys                   :jkvm:edit:
** TODO [#C] add word-wrap mode to list control                :jkvm:list:
- not just wrapping the characters, but breaking on spaces or hyphens or something
- would need to track the height of each entry
** TODO [#C] file browser widget                               :widget:
** TODO [#C] "goal stack" widget in timeline                   :widget:
is this even different from a list widget? color coding, maybe?
the goal is different: it's to show the current state of the narrative.
(it's an "on-screen", in-presentation widget that changes as you navigate through time)

** TODO [#C] demonstrate mouse events                          :jkvm:
** TODO [#C] elastic tabstops for editor
https://nickgravgaard.com/elastic-tabstops/
** TODO [#D] add ability to run arbitrary verbs on every frame
- The idea here was to have a general-purpose task runner, that was not necessarily tied to a widget.
- I don't remember why I wanted this,
- But it's easy to simulate with an invisible widget.
- Is there any need for more than this?

** TODO [#D] document and port cwio
cwio = 'colorwrite'
https://github.com/tangentstorm/xpl/blob/master/demo/cwio_eg.pas

** TODO [#D] git status widget                                 :jkvm:files:
(after we have a file browser)
** TODO [#D] paging in text editor
  - insert page
  - delete page
  - join pages

** TODO [#D] =render_UiListWidget_= could use some golfing


* someday / maybe
** [#D] show (os) console in jqt
: jshowconsole_j_ 1  NB. doesn't seem to work in jqt
qt terminal doesn't support vt escape codes
not sure i even care about this.
(would have to be done in jqt front-end itself)
(better idea would probably be make terminal emulator in jqt, or opengl, or SDL)

** [#D] integrate with JOD?
* design work needed
** in =exec_world_=, decide what to do when an error happens and the debugger is on. :unclear:
** better idiom for expresssing 'method___self' (see =create= in repl.ijs) :unclear:
maybe this ties in with the '::' concept for nested spaces
(but: conames and names don't currently occupy the same namespace)
maybe ::x  is x in current namespace?



* finished
** [3/3] app framework
*** DONE render multiple widgets to buffer
*** DONE emit only changed lines
*** DONE handle unicode vid buffers properly
** [5/5] basic line editor
*** DONE fix broken fwd/bwd commands
*** DONE syntax highlighting in the editor (proof of concept)
*** DONE fix bug: space key does not work
*** DONE record keystrokes as macros
*** DONE concatenate the inserted characters without redundant escapes
*** DONE remove spurious color codes
*** DONE move macros from token editor to plain editor
*** DONE set aside "token editor" concept for now
*** DONE restore syntax highlighting
** [4/4] macro timing
*** DONE record and quantize keystroke timestamps
*** DONE encode timing in the macros itself
*** DONE [7/7] make macro animations asynchronous
(get them out of the while loop)

- [X] each widget needs an 'update' verb and an 'A' flag for whether it's active/animated.
- [X] update app should call update on every active widget on each tick, *before* it re-renders.
- [X] implement step ( just render @ update )
- [X] main loop should call app step instead of render.
- [X] argument to step should be the time delta since last step (j-kvm.ijs)
- [X] editor needs a flag/mode that indicates it's playing (maybe the A flag does this)
- [X] editor's update method should play the next character in the macro if it's animating.

*** DONE allow speed control per keystroke in the editor.
initially got this for free because it pauses after each keystroke

** [4/4] screenplay editor ui
*** DONE [3/3] implement a scrolling list widget
**** DONE visible range
**** DONE current highlight
**** DONE scroll
*** DONE show slides and steps in separate panes at bottom
*** DONE roundtrip to/from org-mode
*** DONE make kvm a library so syndir can import it
** [6/6] extract repl widget
*** DONE add history widget to repl
*** DONE implement solution for composite widgets
*** DONE allow widgets to draw and blit themselves to current terminal
*** DONE implement blit for vt
*** DONE make repl a composite widget
*** DONE draw history whether it's part of MJE or not
** previously
*** DONE finish parser for xterm color codes (vputs)
*** DONE widgetize repl history
*** DONE evaluate and show output
*** DONE implement ^K -> clear to end of line (d$ in vim?)
*** DONE don't hardcode the script path
*** DONE 'pre-render' the repl interactions for all slides
- history can just be the list of lines on the screen
- at each step, store which one is the bottom-most on screen.
- then to render, take a window of lines the same size as the terminal
- for each input there should/could also be an animation of how we arrived at it
*** DONE implement 'worlds' so I can track the state of the system at each point
*** DONE pre-determine the height of the repl window (=H_REPL=) for the presentation.
*** DONE use an in-world variable to track the state of the editor
*** DONE parse repl inputs from the org file
- lines starting with ': . ' are editor animations (macros)
- lines starting with ':' are repl input
- If a editor animaiton precedes the repl input, it should be treated as a derivation of the input, and an alarm should be triggered if it doesn't actually produce the expected input.
(this might happen if the editor macro modifies previous inputs and the input history changes due to modifying the narrative)
*** DONE handle local definitions
I see three alternatives:
  - [X] rewrite the code before it is evaluated (replace =. with =:)
  - execute the code in a separate j process
  - execute the code as part of an immex expression
*** DONE execute every line starting with ':' (but not ': .') on load
*** DONE execute each line using the world concept
*** DONE append output to the echo history
*** DONE track the repl history length at each step (before and after)
*** DONE when navigating to a step, render the repl in its 'before' state
*** DONE map each step in the slide to a world
*** DONE handle box-drawing characters
*** DONE rewrite special names

** ep-10: repl recorder
*** DONE insert new commands into screenplay
*** DONE insert keylog macro into screenplay
*** DONE clear macro after each input
** ep-11: macro playback in repl
*** bugs
**** DONE fix ctrl-o so it re-opens the file
**** DONE bug: history is messed up when you press ctrl-o
(needed to fix =init_world_=)
**** DONE bug: text added from repl gets discarded
(fix was to use =insline= instead of =ins__cmd=)
**** DONE do not show macros in the repl
(fix was change to =new_repl_line=)
**** DONE fix the right side of outline so that it scrolls
height (H)  was just set wrong
**** DONE =goz_UiList_= does not scroll correctly (cursor hidden when entering from bottom)
fixed by adding bounds checking to =goz=

*** features
**** DONE get simple macro playback working (using empty start state for now)
- Play macro when cmd cursor is on macro and you press 'N'.
**** DONE track the mark/selection on each line as we load (part of repl state)
- maybe answer here is to have UiEditWidget produce and consume a state memo

**** DONE play macros (without pauses) when loading and keep start states for each line
- =tmp= is temporary editor object (no need to render)
- set =KPS__tmp= to _ for infinite speed
- set =TSV__tmp= to 0 to turn off random variation
- call =do__tmp= with the macro
- just call =update_tmp 1= until =A__tmp= is 0
- state for next iteration is =B__tmp=
- save start states in =olr=

**** DONE play macros from the line's starting state when 'N' is pressed
